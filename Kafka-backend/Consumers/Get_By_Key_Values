from flask import Flask, Response, jsonify
from confluent_kafka import Consumer, TopicPartition
import json

app = Flask(__name__)


def consume_messages_all(consumer_config, topic):
    consumer = Consumer(consumer_config)
    messages = []

    # Get the list of partitions for the topic
    partitions = consumer.list_topics(topic).topics[topic].partitions.keys()

    # Assign all partitions to the consumer
    consumer.assign([TopicPartition(topic, partition) for partition in partitions])

    while True:
        msg = consumer.poll(1.0)
        if msg is None:
            break
        if msg.error():
            print("Error: {}".format(msg.error()))
            continue

        message = msg.value().decode('utf-8')
        messages.append(message)

    consumer.close()

    return messages


def search_messages_by_key_value(messages, key, value):
    found_messages = []

    for message in messages:
        try:
            message_dict = json.loads(message)
            if key in message_dict:
                message_value = message_dict[key]
                # Handle conversion if the value is an integer
                if isinstance(message_value, int):
                    value = int(value)
                if message_value == value:
                    found_messages.append(message_dict)
        except json.JSONDecodeError:
            print("Invalid JSON message:", message)

    return found_messages


@app.route('/get/key-value/<offset>/<topic>/<group_id>/<key>/<value>', methods=['GET'])
def get_messages_by_key_value(offset, topic, group_id, key, value):
    consumer_config = {
        'bootstrap.servers': 'localhost:9092',
        'group.id': group_id,
        'auto.offset.reset': offset,
        'enable.auto.commit': False
    }

    messages = consume_messages_all(consumer_config, topic)
    found_messages = search_messages_by_key_value(messages, key, value)
    json_data = json.dumps(found_messages)
    return Response(json_data, mimetype='application/json')


if __name__ == '__main__':
    offset = input("Enter offset (earliest or latest): ")
    topic = input("Enter topic: ")
    group_id = input("Enter group ID: ")
    app.run(port=3002)
