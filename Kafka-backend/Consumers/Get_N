from flask import Flask, jsonify
from confluent_kafka import Consumer, TopicPartition

app = Flask(__name__)

def consume_messages_n(consumer, topic, n):
    messages = []

    # Get the number of partitions for the topic
    partitions = list(consumer.list_topics(topic).topics[topic].partitions.keys())
    num_partitions = len(partitions)

    if num_partitions == 1:
        # If there's only one partition, all messages come from the same partition
        tp = TopicPartition(topic, partitions[0])
        consumer.assign([tp])
        remaining_messages = n

        while remaining_messages > 0:
            msg = consumer.poll(1.0)
            if msg is None:
                break
            if msg.error():
                print("Error: {}".format(msg.error()))
                continue

            message = msg.value().decode('utf-8')
            messages.append(message)
            remaining_messages -= 1

    else:
        messages_per_partition = n // num_partitions
        remaining_messages = n % num_partitions

        for partition in partitions:
            tp = TopicPartition(topic, partition)
            consumer.assign([tp])
            num_messages = messages_per_partition

            if remaining_messages > 0:
                num_messages += 1
                remaining_messages -= 1

            while num_messages > 0:
                msg = consumer.poll(1.0)
                if msg is None:
                    break
                if msg.error():
                    print("Error: {}".format(msg.error()))
                    continue

                message = msg.value().decode('utf-8')
                messages.append(message)
                num_messages -= 1

    return messages


@app.route('/get/<topic>/<consumer>/<int:n>', methods=['GET'])
def get_messages(topic, consumer, n):
    consumer_config = {
        'bootstrap.servers': 'localhost:9092',
        'group.id': consumer,
        'auto.offset.reset': 'earliest',
        'enable.auto.commit': False
    }

    consumer = Consumer(consumer_config)
    messages = consume_messages_n(consumer, topic, n)
    consumer.close()

    return jsonify(messages)


if __name__ == '__main__':
    app.run(port=3002)
