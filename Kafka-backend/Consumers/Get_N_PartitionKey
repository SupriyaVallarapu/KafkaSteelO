import json
from flask import Flask, Response, request
from confluent_kafka import Consumer, TopicPartition

app = Flask(__name__)

def get_partition_id(consumer_config, topic, partition_key):
    try:
        consumer = Consumer(consumer_config)
        partitions = consumer.list_topics(topic).topics[topic].partitions.keys()
        consumer.assign([TopicPartition(topic, partition) for partition in partitions])

        while True:
            msg = consumer.poll(1.0)
            if msg is None:
                break
            if msg.error():
                print("Error: {}".format(msg.error()))
                continue

            if msg.key() == partition_key.encode('utf-8'):
                consumer.close()
                return msg.partition()

    except Exception as e:
        print(f"Error while getting partition information: {str(e)}")

    return None

def consume_messages_partition(consumer_config, topic, partition_id, partition_key, n):
    consumer = Consumer(consumer_config)
    consumer.assign([TopicPartition(topic, partition_id)])

    messages = []

    while True:
        msg = consumer.poll(5.0)
        if msg is None:
            break
        if msg.error():
            print("Error: {}".format(msg.error()))
            continue

        message_key = msg.key().decode('utf-8')
        if message_key == partition_key:
            message_value = msg.value().decode('utf-8')
            messages.append(message_value)

            if len(messages) >= n:
                break

    consumer.close()

    return messages

def consume_messages_n(consumer, topic, n):
    messages = []

    # Get the number of partitions for the topic
    partitions = list(consumer.list_topics(topic).topics[topic].partitions.keys())
    num_partitions = len(partitions)

    if num_partitions == 1:
        # If there's only one partition, all messages come from the same partition
        tp = TopicPartition(topic, partitions[0])
        consumer.assign([tp])
        remaining_messages = n

        while remaining_messages > 0:
            msg = consumer.poll(1.0)
            if msg is None:
                break
            if msg.error():
                print("Error: {}".format(msg.error()))
                continue

            message = msg.value().decode('utf-8')
            messages.append(message)
            remaining_messages -= 1

    else:
        messages_per_partition = n // num_partitions
        remaining_messages = n % num_partitions

        for partition in partitions:
            tp = TopicPartition(topic, partition)
            consumer.assign([tp])
            num_messages = messages_per_partition

            if remaining_messages > 0:
                num_messages += 1
                remaining_messages -= 1

            while num_messages > 0:
                msg = consumer.poll(1.0)
                if msg is None:
                    break
                if msg.error():
                    print("Error: {}".format(msg.error()))
                    continue

                message = msg.value().decode('utf-8')
                messages.append(message)
                num_messages -= 1

    return messages

@app.route('/get/<offset>/<topic>/<group_id>/<int:n>', methods=['GET'], defaults={'partition_key': ''})
@app.route('/get/<offset>/<topic>/<group_id>/<int:n>', methods=['GET'])
def get_partition_and_messages(offset, topic, group_id, n):
    partition_key = request.args.get('partition_key')

    consumer_config = {
        'bootstrap.servers': 'localhost:9092',
        'group.id': group_id,
        'auto.offset.reset': offset,
        'enable.auto.commit': False
    }

    if partition_key:
        partition_id = get_partition_id(consumer_config, topic, partition_key)
        if partition_id is None:
            return Response("Partition ID not found", status=404)

        messages = consume_messages_partition(consumer_config, topic, partition_id, partition_key, n)
    else:
        consumer = Consumer(consumer_config)
        messages = consume_messages_n(consumer, topic, n)
        consumer.close()

    json_data = json.dumps(messages)
    return Response(json_data, mimetype='application/json')

if __name__ == '__main__':
    app.run(port=3002)
