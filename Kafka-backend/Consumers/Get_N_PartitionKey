import json
from flask import Flask, Response, jsonify, request
from confluent_kafka import Consumer, TopicPartition, OFFSET_BEGINNING, OFFSET_END

app = Flask(__name__)

def consume_messages_partition(consumer_config, topic, partition, n, offset, partition_key):
    consumer = Consumer(consumer_config)
    consumer.assign([TopicPartition(topic, partition, offset=offset)])

    messages = []
    message_count = 0

    try:
        while True:
            msg = consumer.poll(1.0)
            if msg is None:
                continue
            if msg.error():
                print("Error: {}".format(msg.error()))
                continue

            message = msg.value().decode('utf-8')
            if partition_key is not None:
                # Check if partition key matches
                if msg.key() == partition_key.encode('utf-8'):
                    messages.append(message)
                    message_count += 1
            else:
                messages.append(message)
                message_count += 1

            if n is not None and message_count >= n:
                break

    except KeyboardInterrupt:
        pass

    finally:
        consumer.close()

    return messages


@app.route('/get/<offset>/<topic>/<group_id>/<int:n>', methods=['GET'])
def get_n_messages(offset, topic, group_id, n):
    partition_key = request.args.get('partition_key')

    if topic is None or group_id is None:
        return jsonify({'error': 'Topic and group ID are required.'}), 400

    consumer_config = {
        'bootstrap.servers': 'localhost:9092',
        'group.id': group_id,
        'auto.offset.reset': offset  
    }

    consumer = Consumer(consumer_config)
    partitions = consumer.list_topics(topic).topics[topic].partitions
    num_partitions = len(partitions)

    if num_partitions < 1:
        return jsonify({'error': 'Number of partitions should be greater than or equal to 1.'}), 400

    messages = []

    for i in range(num_partitions):
        partition = i % num_partitions
        if offset == 'earliest':
            partition_messages = consume_messages_partition(consumer_config, topic, partition, n, OFFSET_BEGINNING, partition_key)
        elif offset == 'latest':
            partition_messages = consume_messages_partition(consumer_config, topic, partition, n, OFFSET_END, partition_key)
        else:
            return jsonify({'error': 'Invalid offset value. Only "earliest" or "latest" are allowed.'}), 400

        messages.extend(partition_messages)

    consumer.close()

    json_data = json.dumps(messages)
    return Response(json_data, mimetype='application/json')

if __name__ == '__main__':
    app.run(port=3002)
